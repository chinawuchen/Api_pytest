{"name": "test_main_case[data3]", "status": "failed", "statusDetails": {"message": "AssertionError: assert False", "trace": "self = <Run.test_run_case.TestRunCaseDdt object at 0x11f4d0430>\ndata = ['Hub_0004', '用户管理_账号设置_昵称修改成功', 'yes', 'Hub_0001>data.info.id', 'nickname', 'front/member/update-info', ...]\n\n    @pytest.mark.parametrize(\"data\", data)\n    def test_main_case(self, data):\n        res = None\n        cookie = None\n        get_cookie = None\n        header = None\n        depend_data = None\n    \n        try:\n            is_run = data[int(hi.get_value(\"run\",\"constant\"))]  # 获取是否执行\n            # 根据is_run判断该条用例是否执行\n            if is_run == 'yes':\n                is_depend = data[int(hi.get_value(\"preconditions\",\"constant\"))]  # 获取依赖的前置条件\n                request_data = json.loads(\n                    data[int(hi.get_value(\"data\",\"constant\"))])  # 获取请求参数,放在获取依赖数据之前\n                # 获取依赖数据，关联\n                if is_depend:\n                    depend_key = data[int(hi.get_value(\"rely_id\",\"constant\"))]  # 获取依赖key\n                    depend_data = linked_data.get_data(is_depend)\n                    request_data[depend_key] = depend_data\n                case_id = data[int(hi.get_value(\"case_id\",\"constant\"))]\n                i = excel_data.get_rows_number(case_id)  # 根据case_id获取行号，从1开始\n                url = data[int(hi.get_value(\"url\",\"constant\"))]  # 获取请求地址\n                method = data[int(hi.get_value(\"method\",\"constant\"))]  # 获取请求类型get or post\n                cookie_method = data[int(hi.get_value(\"cookie\",\"constant\"))]  # 获取cookie操作\n                is_header = data[int(hi.get_value(\"header\",\"constant\"))]  # 获取header操作\n                # 获取预期结果方式\n                excepect_method = data[int(hi.get_value(\"excepect_method\",\"constant\"))]\n                # 获取预期结果数据\n                excepect_result = data[int(hi.get_value(\"excepect_result\",\"constant\"))]\n    \n                # 保存和读取cookie(先放这，暂时不用)\n                if cookie_method == 'yes':\n                    cookie = get_cookie_value('web')\n                if cookie_method == 'write':\n                    get_cookie = {\"is_cookie\": \"web\"}\n    \n                # 保存和读取header(主要是操作token), 并执行接口\n                if is_header == \"write_header\":  # 替换成最新的token\n                    res = request.run_main(\n                        method, url, request_data, cookie, get_cookie)\n                    write_header(res)\n                elif is_header == \"chinese\":  # 获取中文的header\n                    header = get_header(is_header)\n                    res = request.run_main(\n                        method, url, request_data, cookie, get_cookie, header)\n                elif is_header == \"english\":  # 获取英文的header\n                    header = get_header(is_header)\n                    res = request.run_main(\n                        method, url, request_data, cookie, get_cookie, header)\n                else:  # 不传header\n                    res = request.run_main(\n                        method, url, request_data, cookie, get_cookie)\n    \n                # 获取响应中的code和msg 的值\n                code = str(res[\"code\"])  # 如果响应没有msg，把code放try里，导致我没拿到code，艹\n                try:\n                    msg = res[\"msg\"]\n                except Exception:  # 保证msg没拿到值时程序不报错并继续执行\n                    # code = None\n                    msg = None\n    \n                ''' 对响应结果进行数据校验，暂时写了5种断言方式 '''\n                # 1.判断字符串excepect_result是否在响应里面\n                if excepect_method == \"in_res\":\n                    result = assertion.is_contain(\n                        excepect_result, json.dumps(res, ensure_ascii=False))\n                    try:\n                        assert result\n                        excel_data.excel_write_data(\n                            i, int(hi.get_value(\"result\",\"constant\")), \"通过\")\n                        excel_data.excel_write_data(i, int(hi.get_value(\"response_data\",\"constant\")),\n                                                    json.dumps(res, ensure_ascii=False))\n                    except Exception as e:\n                        excel_data.excel_write_data(\n                            i, int(hi.get_value(\"result\",\"constant\")), \"失败\")\n                        excel_data.excel_write_data(i, int(hi.get_value(\"response_data\",\"constant\")),\n                                                    json.dumps(res, ensure_ascii=False))\n                        with open(log_file, 'a', encoding='utf-8') as f:\n                            li = i - 1\n                            f.write(\"\\n第%s条用例实际结果与预期结果不一致:\\n\" % li)\n                            f.write(\"预期结果:%s\\n  实际结果:%s\\n\" %\n                                    (excepect_result, res))\n                        raise e\n    \n                # 2.通过\"mec\"断言，同时匹配code和msg\n                if excepect_method == \"mec\":\n                    config_msg = assertion.handle_result(url, code)\n                    try:\n                        assert msg == config_msg\n                        excel_data.excel_write_data(\n                            i, int(hi.get_value(\"result\",\"constant\")), \"通过\")\n                        excel_data.excel_write_data(i, int(hi.get_value(\"response_data\",\"constant\")),\n                                                    json.dumps(res, ensure_ascii=False))\n                    except Exception as e:\n                        excel_data.excel_write_data(\n                            i, int(hi.get_value(\"result\",\"constant\")), \"失败\")\n                        excel_data.excel_write_data(i, int(hi.get_value(\"response_data\",\"constant\")),\n                                                    json.dumps(res, ensure_ascii=False))\n                        with open(log_file, 'a', encoding='utf-8') as f:\n                            li = i - 1\n                            f.write(\"\\n第%s条用例实际结果与预期结果不一致:\\n\" % li)\n                            f.write(\"预期结果:%s\\n  实际结果:%s\\n\" % (config_msg, msg))\n                        raise e\n    \n                # 3.通过\"errorcode\"断言，匹配code\n                if excepect_method == \"errorcode\":\n                    # 这里拿到的excepect_result, code都是字符串\n                    try:\n                        assert excepect_result == code\n                        excel_data.excel_write_data(\n                            i, int(hi.get_value(\"result\",\"constant\")), \"通过\")\n                        excel_data.excel_write_data(i, int(hi.get_value(\"response_data\",\"constant\")),\n                                                    json.dumps(res, ensure_ascii=False))\n                    except Exception as e:\n                        excel_data.excel_write_data(\n                            i, int(hi.get_value(\"result\",\"constant\")), \"失败\")\n                        excel_data.excel_write_data(i, int(hi.get_value(\"response_data\",\"constant\")),\n                                                    json.dumps(res, ensure_ascii=False))\n                        with open(log_file, 'a', encoding='utf-8') as f:\n                            li = i - 1\n                            f.write(\"\\n第%s条用例实际结果与预期结果不一致:\\n\" % li)\n                            f.write(\"预期结果:%s\\n  实际结果:%s\\n\" %\n                                    (excepect_result, code))\n                        raise e\n    \n                # 4.通过json数据格式断言\n                if excepect_method == \"json\":\n                    # code = int(code) # 这里拿到的code是字符串，我把状态码写成字符串\n                    if code == \"0\":\n                        status_str = 'sucess'\n                    elif code == \"99999\":\n                        status_str = 'error'\n                    else:\n                        status_str = 'shaocan'\n                    excepect_result = assertion.get_result_json(\n                        url, status_str)\n                    result = assertion.handle_result_json(res, excepect_result)\n                    try:\n                        assert result\n                        excel_data.excel_write_data(\n                            i, int(hi.get_value(\"result\",\"constant\")), \"通过\")\n                        excel_data.excel_write_data(i, int(hi.get_value(\"response_data\",\"constant\")),\n                                                    json.dumps(res, ensure_ascii=False))\n                    except Exception as e:\n                        excel_data.excel_write_data(\n                            i, int(hi.get_value(\"result\",\"constant\")), \"失败\")\n                        excel_data.excel_write_data(i, int(hi.get_value(\"response_data\",\"constant\")),\n                                                    json.dumps(res, ensure_ascii=False))\n                        with open(log_file, 'a', encoding='utf-8') as f:\n                            li = i - 1\n                            f.write(\"\\n第%s条用例实际结果与预期结果不一致:\\n\" % li)\n                            f.write(\"预期结果:%s\\n  实际结果:%s\\n\" %\n                                    (excepect_result, res))\n                        raise e\n    \n                # 5.通过jsonpath解析断言\n                if excepect_method == \"jsonpath\":\n                    result = assertion.handle_result_jsonpath(\n                        res, excepect_result)\n                    try:\n                        assert result\n                        excel_data.excel_write_data(\n                            i, int(hi.get_value(\"result\",\"constant\")), \"通过\")\n                        excel_data.excel_write_data(i, int(hi.get_value(\"response_data\",\"constant\")),\n                                                    json.dumps(res, ensure_ascii=False))\n                    except Exception as e:\n                        excel_data.excel_write_data(\n                            i, int(hi.get_value(\"result\",\"constant\")), \"失败\")\n                        excel_data.excel_write_data(i, int(hi.get_value(\"response_data\",\"constant\")),\n                                                    json.dumps(res, ensure_ascii=False))\n                        with open(log_file, 'a', encoding='utf-8') as f:\n                            li = i - 1\n                            f.write(\"\\n第%s条用例实际结果与预期结果不一致:\\n\" % li)\n                            f.write(\"预期结果:%s\\n  实际结果:%s\\n\" %\n                                    (excepect_result, res))\n                        raise e\n    \n        except Exception as e:\n            excel_data.excel_write_data(i, int(hi.get_value(\"result\",\"constant\")), \"失败\")\n            with open(log_file, 'a', encoding='utf-8') as f:\n                li = i - 1\n                f.write(\"\\n第%s条用例报错:\\n\" % li)\n            initLogging(log_file, e)\n>           raise e\n\nRun/test_run_case.py:227: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nRun/test_run_case.py:126: in test_main_case\n    raise e\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Run.test_run_case.TestRunCaseDdt object at 0x11f4d0430>\ndata = ['Hub_0004', '用户管理_账号设置_昵称修改成功', 'yes', 'Hub_0001>data.info.id', 'nickname', 'front/member/update-info', ...]\n\n    @pytest.mark.parametrize(\"data\", data)\n    def test_main_case(self, data):\n        res = None\n        cookie = None\n        get_cookie = None\n        header = None\n        depend_data = None\n    \n        try:\n            is_run = data[int(hi.get_value(\"run\",\"constant\"))]  # 获取是否执行\n            # 根据is_run判断该条用例是否执行\n            if is_run == 'yes':\n                is_depend = data[int(hi.get_value(\"preconditions\",\"constant\"))]  # 获取依赖的前置条件\n                request_data = json.loads(\n                    data[int(hi.get_value(\"data\",\"constant\"))])  # 获取请求参数,放在获取依赖数据之前\n                # 获取依赖数据，关联\n                if is_depend:\n                    depend_key = data[int(hi.get_value(\"rely_id\",\"constant\"))]  # 获取依赖key\n                    depend_data = linked_data.get_data(is_depend)\n                    request_data[depend_key] = depend_data\n                case_id = data[int(hi.get_value(\"case_id\",\"constant\"))]\n                i = excel_data.get_rows_number(case_id)  # 根据case_id获取行号，从1开始\n                url = data[int(hi.get_value(\"url\",\"constant\"))]  # 获取请求地址\n                method = data[int(hi.get_value(\"method\",\"constant\"))]  # 获取请求类型get or post\n                cookie_method = data[int(hi.get_value(\"cookie\",\"constant\"))]  # 获取cookie操作\n                is_header = data[int(hi.get_value(\"header\",\"constant\"))]  # 获取header操作\n                # 获取预期结果方式\n                excepect_method = data[int(hi.get_value(\"excepect_method\",\"constant\"))]\n                # 获取预期结果数据\n                excepect_result = data[int(hi.get_value(\"excepect_result\",\"constant\"))]\n    \n                # 保存和读取cookie(先放这，暂时不用)\n                if cookie_method == 'yes':\n                    cookie = get_cookie_value('web')\n                if cookie_method == 'write':\n                    get_cookie = {\"is_cookie\": \"web\"}\n    \n                # 保存和读取header(主要是操作token), 并执行接口\n                if is_header == \"write_header\":  # 替换成最新的token\n                    res = request.run_main(\n                        method, url, request_data, cookie, get_cookie)\n                    write_header(res)\n                elif is_header == \"chinese\":  # 获取中文的header\n                    header = get_header(is_header)\n                    res = request.run_main(\n                        method, url, request_data, cookie, get_cookie, header)\n                elif is_header == \"english\":  # 获取英文的header\n                    header = get_header(is_header)\n                    res = request.run_main(\n                        method, url, request_data, cookie, get_cookie, header)\n                else:  # 不传header\n                    res = request.run_main(\n                        method, url, request_data, cookie, get_cookie)\n    \n                # 获取响应中的code和msg 的值\n                code = str(res[\"code\"])  # 如果响应没有msg，把code放try里，导致我没拿到code，艹\n                try:\n                    msg = res[\"msg\"]\n                except Exception:  # 保证msg没拿到值时程序不报错并继续执行\n                    # code = None\n                    msg = None\n    \n                ''' 对响应结果进行数据校验，暂时写了5种断言方式 '''\n                # 1.判断字符串excepect_result是否在响应里面\n                if excepect_method == \"in_res\":\n                    result = assertion.is_contain(\n                        excepect_result, json.dumps(res, ensure_ascii=False))\n                    try:\n>                       assert result\nE                       assert False\n\nRun/test_run_case.py:111: AssertionError"}, "attachments": [{"name": "log", "source": "633df7cb-4f70-40ff-bc46-91385f6329a6-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "data", "value": "['Hub_0004', '用户管理_账号设置_昵称修改成功', 'yes', 'Hub_0001>data.info.id', 'nickname', 'front/member/update-info', 'post', '{\"nickname\": \"独角兽onepicec\"}', None, 'chinese', 'in_res', '\"msg\": \"昵称修改成功\"', '失败', '{\"result\": false, \"data\": \"\", \"msg\": \"token失效\", \"code\": 10006, \"toLogin\": true}']"}], "start": 1688907546257, "stop": 1688907546490, "uuid": "05c81573-0525-4fbd-bd8f-0a75fd6aee45", "historyId": "ec98966fab165b725f1fe89e634175e4", "testCaseId": "03d3f7b75fc0980ba3d8fb66b7810fd2", "fullName": "Run.test_run_case.TestRunCaseDdt#test_main_case", "labels": [{"name": "parentSuite", "value": "Run"}, {"name": "suite", "value": "test_run_case"}, {"name": "subSuite", "value": "TestRunCaseDdt"}, {"name": "host", "value": "wuchendeMacBook-Air.local"}, {"name": "thread", "value": "80062-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Run.test_run_case"}]}